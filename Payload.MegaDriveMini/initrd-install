#!/bin/sh
#
#  Copyright 2019 ModMyClassic (https://modmyclassic.com/license)
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
###############################################################################
# Project Lunar - Primary Mod INITRD Installer
# ModMyClassic.com / https://discordapp.com/invite/8gygsrw
###############################################################################

###############################################################################
### Configuration

###############################################################################
### Local Variables

TMP_MOUNT="/tmp/mount/nandd"
PROJECTLUNAR_PATH="/opt/project_lunar"
INSTALLFILES_PATH="/tmp"
BACKUPFILES_PATH="/tmp"
###############################################################################
### Local Functions

led_flash() {
  SLEEP=0.2
  while true; do
    echo 0 >/sys/class/leds/led1/brightness
    sleep ${SLEEP}
    echo 255 >/sys/class/leds/led1/brightness
    sleep ${SLEEP}
  done
}

kill_ui_programs() {
  killall -s TERM sdl_display retroarch emulationstation boot_menu start_retroarch start_emustation start_bootmenu start_m2engage aplay es_bg_music &> "/dev/null"
  ${TMP_MOUNT}/etc/init.d/moon-game stop &> "/dev/null"
}

init_nandg() {
  echo "[PROJECT LUNAR](INIT) Formatting extra partition..."
  if [ "$(mke2fs -t ext4 /dev/nandg)" ]; then
    [ "$(mount | head -n2 | tail -n1 | awk -F \( '{ print $2 }' | cut -c -2)" = "ro" ] && mount -o remount,rw "${TMP_MOUNT}/" && export RW_CHANGE=1
    sed -i 's+/dev/nandg      /opt/project_lunar      ext4    defaults,rw        0       0++g' "${TMP_MOUNT}/etc/fstab"
    echo "/dev/nandg      ${PROJECTLUNAR_PATH}      ext4    defaults,rw        0       0" >> "${TMP_MOUNT}/etc/fstab"
    [ ! -z ${RW_CHANGE} ] && [ "$(mount | head -n2 | tail -n1 | awk -F \( '{ print $2 }' | cut -c -2)" = "rw" ] && mount -o remount,ro "${TMP_MOUNT}/"
    [ -z "$(grep /dev/nandg ${TMP_MOUNT}/etc/fstab)" ] && return 1
    echo "[PROJECT LUNAR](INIT) Formatted extra partition..."
  else
    echo "[PROJECT LUNAR](FATAL ERROR) NANDG FORMAT FAILED!" && return 1
  fi
  return 0
}

mount_nandg() {
  if [ ! -d "${TMP_MOUNT}${PROJECTLUNAR_PATH}" ]; then
    [ "$(mount | head -n2 | tail -n1 | awk -F \( '{ print $2 }' | cut -c -2)" = "ro" ] && mount -o remount,rw "${TMP_MOUNT}/" && export RW_CHANGE=1
    mkdir -p "${TMP_MOUNT}${PROJECTLUNAR_PATH}" || return 1
    [ ! -z ${RW_CHANGE} ] && [ "$(mount | head -n2 | tail -n1 | awk -F \( '{ print $2 }' | cut -c -2)" = "rw" ] && mount -o remount,ro "${TMP_MOUNT}/"
  fi
  mount "/dev/nandg" "${TMP_MOUNT}${PROJECTLUNAR_PATH}" || return 1
  return 0
}

prepare_nandc() {
  echo "[PROJECT LUNAR](INSTALL) Preparing kernel partition..."
  umount "/tmp/mount/nandc"
  sync
  ${INSTALLFILES_PATH}${PROJECTLUNAR_PATH}/bin/fsck.fat -y "/dev/nandc"
  sync
  mount "/dev/nandc" "/tmp/mount/nandc"
  rm -rf "/tmp/mount/nandc/"*
  df -h
  sync
}

repair_nandc() {
  echo "[PROJECT LUNAR](INSTALL) Repairing kernel partition..."
  #gzip -c "/dev/nandc" > "/tmp/nandc_for_investigation.gz"
  umount -f "/tmp/mount/nandc" &> "/dev/null"
  ${INSTALLFILES_PATH}${PROJECTLUNAR_PATH}/bin/busybox-pl mkfs.vfat -v "/dev/nandc"
  umount -f "/tmp/mount/nandc" &> "/dev/null"
  mount "/dev/nandc" "/tmp/mount/nandc"
  sync
}

toggle_rw_root_fs() {
  if [ "${1}" != "0" ] && [ "${1}" != "1" ]; then
    echo "[PROJECT LUNAR](ERROR) Bad usage of toggle_rw_root_fs()" && return 1
  fi
  if [ "${1}" = "1" ]; then
    mount -o remount,rw "${TMP_MOUNT}/" || return 1
  else
    mount -o remount,ro "${TMP_MOUNT}/" || return 1
  fi
  return 0
}

delete_old_menu_saves() {
  rm -f "/tmp/mount/nande/data_008_0000.bin"
  rm -f "/tmp/mount/nande/meta_008_0000.bin"
}

backup_kernel() {
  echo "[PROJECT LUNAR](BACKUP) Backing up Kernel..."
  mkdir -p "/tmp/backup"
  cp -fv "/dev/nandb" "/tmp/"
  mount "/dev/nandc" "/tmp/backup/" && cp -fv "/tmp/backup/uImage" "/tmp/" && umount "/tmp/backup"
  cp -fv "${TMP_MOUNT}/lib/modules/3.4.113/extra/mali.ko" "/tmp/"
  cd "${INSTALLFILES_PATH}" && tar -cvf "$(cat ${TMP_MOUNT}/version)-kernel.tar" "nandb" "uImage" "mali.ko"
  gzip "$(cat ${TMP_MOUNT}/version)-kernel.tar"
  mkdir -p "${TMP_MOUNT}${PROJECTLUNAR_PATH}/backup"
  mv -f "$(cat ${TMP_MOUNT}/version)-kernel.tar.gz" "${TMP_MOUNT}${PROJECTLUNAR_PATH}/backup/"
  rm -rf "/tmp/magic.bin" "/tmp/nandb" "/tmp/uImage" "/tmp/mali.ko" "/tmp/backup"
  [ ! -f "${TMP_MOUNT}${PROJECTLUNAR_PATH}/backup/$(cat ${TMP_MOUNT}/version)-kernel.tar.gz" ] && echo "[PROJECT LUNAR](FATAL ERROR) KERNEL BACKUP FAILED!" && return 1
  echo "[PROJECT LUNAR](BACKUP) Kernel file: $(cat ${TMP_MOUNT}/version)-kernel.tar.gz created!"
  return 0
}

revert_kernel() {
  mkdir -p "${BACKUPFILES_PATH}/kernel"
  cp -fv "${TMP_MOUNT}${PROJECTLUNAR_PATH}/backup/$(cat ${TMP_MOUNT}/version)-kernel.tar.gz" "${BACKUPFILES_PATH}/kernel/"
  cd "${BACKUPFILES_PATH}/kernel"
  gunzip -d "$(cat /version)-kernel.tar.gz"
  tar -xvf "$(cat /version)-kernel.tar"
  cd "${INSTALLFILES_PATH}"
  echo "[PROJECT LUNAR](UNINSTALL) Flashing stock kernel"
  rm -f "${TMP_MOUNT}/lib/modules/3.4.113/extra/mali.ko"
  cp -fav "${BACKUPFILES_PATH}/kernel/mali.ko" "${TMP_MOUNT}/lib/modules/3.4.113/extra/"
  cp -fav "${BACKUPFILES_PATH}/kernel/uImage" "/tmp/mount/nandc/"
  return 0
}

revert_copy() {
  umount -f "${TMP_MOUNT}${PROJECTLUNAR_PATH}"
  rm -rf "${TMP_MOUNT}${PROJECTLUNAR_PATH}"
  rm -rf "${TMP_MOUNT}/root/.ash_history"
  rm -rf "${TMP_MOUNT}/root/.para"
  for x in "${TMP_MOUNT}/etc/init.d/"*"_PL"*; do
    rm -rf "${x}"
  done
  return 0
}

revert_nandg() {
  echo "[PROJECT LUNAR](UNINSTALL) Reverting extra partition..."
  dd if="/dev/zero" of="/dev/nandg" bs=1M
  [ "$(mount | head -n2 | tail -n1 | awk -F \( '{ print $2 }' | cut -c -2)" = "ro" ] && mount -o remount,rw "/" && RW_CHANGE=1
  sed -i 's+/dev/nandg      /opt/project_lunar      ext4    defaults,rw        0       0++g' "${TMP_MOUNT}/etc/fstab"
  [ ! -z ${RW_CHANGE} ] && [ "$(mount | head -n2 | tail -n1 | awk -F \( '{ print $2 }' | cut -c -2)" = "rw" ] && mount -o remount,ro "/"
  echo "[PROJECT LUNAR](UNINSTALL) Reverted extra partition..."
  exit 1
}

###############################################################################
### Main

main() {
  echo "==============================================================================="
  echo "Starting Project Lunar installation..."
  echo "==============================================================================="
  led_flash > "/dev/null" 2>&1 &
  kill_ui_programs
  echo "[PROJECT LUNAR](INSTALL) Displaying splash"
  sdl_display "${INSTALLFILES_PATH}${PROJECTLUNAR_PATH}/etc/project_lunar/IMG/splashscreen.png" &
  echo "[PROJECT LUNAR](INSTALL) Execute toggle_rw_root_fs()"
  toggle_rw_root_fs 1 || exit 1
  if [ ! -f "/tmp/mount/nandg/pl_version" ]; then
    echo "[PROJECT LUNAR](INSTALL) Execute init_nandg()"
    init_nandg || FAIL_S1=1
    [ ! -z "${FAIL_S1}" ] && revert_nandg
    echo "[PROJECT LUNAR](INSTALL) Execute mount_nandg()"
    mount_nandg || FAIL_S1=1
    [ ! -z "${FAIL_S1}" ] && revert_nandg
  else
    echo "[PROJECT LUNAR](INSTALL) Skipping NANDG initialise, already initialised!"
  fi
  echo "[PROJECT LUNAR](INSTALL) Copying deployment"
  cp -fva "${INSTALLFILES_PATH}/etc" "${TMP_MOUNT}/" || FAIL_S2=1
  cp -fva "${INSTALLFILES_PATH}/opt" "${TMP_MOUNT}/" || FAIL_S2=1
  cp -fva "${INSTALLFILES_PATH}/uninstall" "${TMP_MOUNT}/opt/" && chmod +x "${TMP_MOUNT}/opt/uninstall" || FAIL_S2=1
  cp -fva "${INSTALLFILES_PATH}/pl_version" "${TMP_MOUNT}/opt/project_lunar/pl_version" || FAIL_S2=1
  tar -xvf "${INSTALLFILES_PATH}/RetroArch"* || FAIL_S2=1
  mkdir -p "${TMP_MOUNT}${PROJECTLUNAR_PATH}/opt" || FAIL_S2=1
  cp -fr "${INSTALLFILES_PATH}/retroarch" "${TMP_MOUNT}${PROJECTLUNAR_PATH}/opt/" || FAIL_S2=1
  [ ! -z "${FAIL_S2}" ] && revert_copy && revert_nandg
  if [ ! -f "${TMP_MOUNT}${PROJECTLUNAR_PATH}/backup/$(cat ${TMP_MOUNT}/version)-kernel.tar.gz" ]; then
    echo "[PROJECT LUNAR](INSTALL) Generating local kernel backup"
    backup_kernel || FAIL_S3=1
    [ ! -z "${FAIL_S3}" ] && revert_copy && revert_nandg
  else
    echo "[PROJECT LUNAR](INSTALL) Skipping kernel backup: ${TMP_MOUNT}${PROJECTLUNAR_PATH}/backup/$(cat ${TMP_MOUNT}/version)-kernel.tar.gz already exists!"
  fi
  delete_old_menu_saves
  cd ${INSTALLFILES_PATH}
  echo "[PROJECT LUNAR](INSTALL) Flashing Project Lunar kernel"
  cp -f "${INSTALLFILES_PATH}/kernel/mali.ko" "${TMP_MOUNT}/lib/modules/3.4.113/extra/" || FAIL_S4=1
  prepare_nandc
  AVAILABLE="$(($(df -P /dev/nandc | tail -1 | awk '{ print $4 }') * 1000))"
  KERNELSIZE="$(ls -l /tmp/kernel/uImage | awk '{ print $5 }')"
  if [ ! "${KERNELSIZE}" -lt "${AVAILABLE}" ]; then
    repair_nandc
  fi
  cp -f "${INSTALLFILES_PATH}/kernel/uImage" "/tmp/mount/nandc/" || FAIL_S4=1
  sync
  sleep 0.5 #Lets be safe...
  umount "/tmp/mount/nandc/"
  [ ! -z "${FAIL_S4}" ] && revert_kernel && revert_copy && revert_nandg
  echo "[PROJECT LUNAR](INSTALL) Displaying finished splash"
  kill_ui_programs
  echo "==============================================================================="
  echo "Project Lunar installed successfully!"
  echo "==============================================================================="
  sdl_display "${INSTALLFILES_PATH}${PROJECTLUNAR_PATH}/etc/project_lunar/IMG/PL_Done.png" &
  sync
  sleep 5
  reboot
}

###############################################################################
### Execute

main "$@"